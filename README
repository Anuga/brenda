Brenda -- Blender render farm software for Amazon Web Services.

Brenda uses Amazon EC2, S3, and SQS to implement a distributed
render farm.  Using Brenda, you can accelerate complex render
tasks by distributing the work to tens, hundreds, or even
thousands of virtual machines in the cloud.

Brenda includes four tools which are outlined below.  To see
detailed help for each tool, run the tool with the -h option.

You can also view the program notes for James Yonan's Brenda talk
at the Blender Conference 2013 in doc/brenda-talk-blendercon-2013.pdf

1. brenda-work -- used to create and populate an SQS queue with
   render tasks.  A render task is a short (often one-line) shell
   script that runs blender to render a single frame or subframe
   in a project.  Uses the SQS API.

2. brenda-run -- used to start EC2 instances running Brenda,
   either as on-demand instances or spot instances at a given
   maximum bid price.  Uses the EC2 API.

3. brenda-tool -- used to monitor the operation of an EC2 render
   farm.  It allows an ssh or rsync command to be simultaneously
   executed on all nodes in the farm.  Uses EC2 API and requires
   a standard unix shell where ssh and rsync are available and
   can be run from the command line.

4. brenda-node -- worker script to be run on the render farm nodes
   themselves.  It reads tasks from an SQS queue, executes the task
   (usually render operations), and copies the task products (such
   as rendered PNG frames) to S3.  brenda-node is usually not run
   directly by the user, but is remotely instantiated by brenda-run.
   Uses the SQS and S3 APIs.

PLATFORMS SUPPORTED
-------------------

The Brenda client software is command-line oriented and has currently
been tested on Mac OS X and Linux only.

TUTORIAL
--------

This tutorial is intended for use on Mac OS X or Linux.

If you don't have an AWS (Amazon Web Services) account, sign up for one now.

First, install the "boto" python library.  This library is used by
Brenda to interact with AWS.

Next, download and install Brenda on the client machine.

$ git clone http://github.com/jamesyonan/brenda.git
$ cd brenda
$ python setup.py install

You will need an RSA-based SSH key to access the VMs (virtual machines) that we
will spawn using the AWS EC2 service.  These VMs are often referred to as
"instances", and we will be creating many of these to act as worker nodes in
our render farm.

The Brenda client software assumes that you have a public key in
$HOME/.ssh/id_rsa.pub and a private key in $HOME/.ssh/id_rsa.
If you don't have these keys, you can easily generate them:

$ ssh-keygen -t rsa

Next, obtain the AWS "Access Key" and "Secret Key" from the AWS management
console.  These credentials will allow the Brenda client tools to access
AWS resources in your account.

We will also need a tool for accessing the AWS S3 file store, because we
will be using S3 for two purposes:

1. As a storage location for our Blender project, to allow the render farm
   nodes to access it.

2. As a storage location for final rendered frames generated by the render
   farm.

For this, download and install the "s3cmd" tool.  You will need to configure
s3cmd with your AWS account credentials:

$ s3cmd --configure

Next, we will bundle up our Blender project and save it to S3 so the render
farm can access it.

To do this, create a folder with your .blend file and any other supporting
files necessary to render frames, then compress it using tar or zip.
For example, supposing that the project directory is called "myproject",
run:

$ tar cfzv myproject.tar.gz myproject

Next, create an S3 "bucket" on AWS to store the myproject.tar.gz file we
created above.  S3 buckets are sort of like folders, but they must have a
globally unique name, and they can only contain flat files, not subfolders.
You can choose a name here for the project bucket which I will hereafter
refer to as PROJECT_BUCKET.

$ s3cmd mb s3://PROJECT_BUCKET

It is possible that the name you chose for PROJECT_BUCKET is already in
use by someone else.  In this case you will see an error message,
and can retry the command using a different name.

We also need another bucket for the render farm to save the rendered
frames.  We will call this FRAME_BUCKET.  Just like PROJECT_BUCKET
above, you should select a unique name.

$ s3cmd mb s3://FRAME_BUCKET

Now, we will copy our compressed blender project file to our S3 project
bucket:

$ s3cmd put myproject.tar.gz s3://PROJECT_BUCKET

To verify that the file was copied, list the files in the bucket:

$ s3cmd ls s3://PROJECT_BUCKET

Next, we will create a Brenda configuration file.  The Brenda
client tools will look for the configuration file in $HOME/.brenda.conf

Create $HOME/.brenda.conf now with the following content, making sure
to replace PROJECT_BUCKET and FRAME_BUCKET with the names you chose
above.

BLENDER_PROJECT=s3://PROJECT_BUCKET/myproject.tar.gz
WORK_QUEUE=sqs://FRAME_BUCKET
RENDER_OUTPUT=s3://FRAME_BUCKET
SHUTDOWN=1

To explain the above configuration settings in detail:

BLENDER_PROJECT is the name of our project file on S3.  It
can be an s3:// or file:// URL.

WORK_QUEUE is the name of an SQS queue that we will create for the
purpose of staging and sequencing the tasks in our render.

RENDER_OUTPUT is the name of an S3 bucket that will contain our
rendered frames.

SHUTDOWN=1 tells the render farm instances that they should
automatically shut themselves down after the render is complete.

In the next step, we will create the Work Queue for our render
farm.  A work queue is basically a list of many small scripts
that, when run together, will render all of the frames in our
project.

Brenda's essential purpose is to accelerate the rendering process by
concurrently processing our work queue using tens, hundreds or even
thousands of virtual machines.

For example, one of the scripts in a work queue might
look like this (to render frame 5 of our project):

blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 5 -e 5 -j 1 -t 0 -a

Suppose our project contains 240 frames.  Then the work queue
would look like this, where each line is a separate task in the
work queue:

blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 1 -e 1 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 2 -e 2 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 3 -e 3 -j 1 -t 0 -a
 .
 .
 .
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 238 -e 238 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 239 -e 239 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 240 -e 240 -j 1 -t 0 -a

The first step in creating a work queue is to start with a Script Template.
A script template describes how to run blender to accomplish a unit of work.
Suppose that we want a unit of work to be the rendering of a single PNG
frame.  In this case, our script template would be this:

blender -b *.blend -F PNG -o $OUTDIR/frame_###### $FRAME -t 0 -a

Using a text editor, create a file called "frame-template" that contains
the above line.  This is a simple template that is designed to render one
frame at a time (as a more advanced exercise, it is also possible to create
a subframe rendering template that will break the smallest unit of render
work down to a portion of a frame -- this could be used to accelerate the
rendering of a still, or to cut down the time spent processing each unit
of work in animations where each frame takes many computer-hours to render).

Brenda includes a tool called "brenda-work" that allows us to easily
generate a work queue.  Suppose that you want to render the first 240
frames of your project.  Use this command to generate the work queue
using the "frame-template" file we created above:

$ brenda-work -T frame-template -e 240 push

This will create a work queue to render frames 1 to 240 of your project.

To see the current size of the work queue, run:

$ brenda-work status

You should see a queue size of 240.

If you make a mistake and want to delete the current queue and start over:

$ brenda-work reset

Finally, as part of our initial setup, we will do a one-time initialization
of a new AWS account to create security group and ssh key profiles.  This
only needs to be done once per AWS account:

$ brenda-run init

At this point, we are ready to start rendering.

One of the more interesting features of AWS is the EC2 spot market.  In this
market, we can rent instances (i.e. virtual machines) by the hour to render
our project at a price considerably less than the on-demand going rate.
While the spot market offers good pricing, the downside is that our instances
can be terminated at any time if the spot price rises above our maximum bid
price.

Let's check the current spot market prices:

$ brenda-run price

When I run the command now, I see the following:

Spot price data for instance c1.xlarge
us-east-1a 2013-10-24T07:32:32.000Z $0.141
us-east-1b 2013-10-24T03:55:49.000Z $0.07
us-east-1c 2013-10-24T02:05:53.000Z $0.07
 
This indicates that the c1.xlarge instance (a reasonably fast VM
with 8 cores) is currently renting for US$0.07 per hour.

Let's bid on 4 c1.xlarge instances at US$0.07 per hour.  Note that
when you run the following command, you are agreeing to be charged
US$0.28 per hour total to rent 4 VMs (i.e. US$0.07 x 4 instances).

$ brenda-run -N 4 -p 0.07 spot

If the above command succeeds, you will see a list of information that includes
the script that Brenda will push to the new instances and a list of 4
SpotInstanceRequest objects.

In some cases, during peak periods at the AWS data centers, spot instances might
not be available for a resonable cost.  In this case, it is possible to use
on-demand instances instead (at a higher cost):

$ brenda-run -N 4 demand

To see the current status of your instances and spot requests:

$ brenda-run status

If you used the "brenda-run ... spot" command above, you should see a rundown
of your 4 pending instances.

Spot Requests
  sir-54b91c35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: pending-evaluation>
  sir-97762e35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: pending-evaluation>
  sir-aa98a235 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: pending-evaluation>
  sir-db7e5a35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: pending-evaluation>

These instances are not yet active but are rather in a "pending-evaluation"
state.  After several minutes, if your given price matches the current spot
market conditions, the instances will be activated.  When this occurs,
the status will show something like this:

$ brenda-run status
Active Instances
  ami-e7c4988e 0:01:51 ec2-107-20-36-70.compute-1.amazonaws.com
  ami-e7c4988e 0:01:51 ec2-50-16-67-202.compute-1.amazonaws.com
  ami-e7c4988e 0:01:51 ec2-54-205-52-227.compute-1.amazonaws.com
  ami-e7c4988e 0:01:50 ec2-54-224-220-141.compute-1.amazonaws.com
Spot Requests
  sir-54b91c35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: fulfilled>
  sir-97762e35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: fulfilled>
  sir-aa98a235 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: fulfilled>
  sir-db7e5a35 RegionInfo:us-east-1 one-time 2013-10-24T05:32:16.000Z $0.07 <Status: fulfilled>

On the other hand, if you used the "brenda-run ... demand" command above, your
instances should be started immediately:

$ brenda-run status
Active Instances
  ami-e7c4988e 0:00:23 ec2-107-20-72-84.compute-1.amazonaws.com
  ami-e7c4988e 0:00:23 ec2-54-211-251-85.compute-1.amazonaws.com
  ami-e7c4988e 0:00:23 ec2-54-226-31-134.compute-1.amazonaws.com
  ami-e7c4988e 0:00:23 ec2-54-234-204-209.compute-1.amazonaws.com

At this point, the render job is running.  There are several methods you can
use to track its progress.

Use this command to view the number of pending frames in the work queue:

$ brenda-work status

The brenda package includes a general purpose tool for executing commands on
the render instances.  For example, to view the end of the log files on
each render instance:

$ brenda-tool ssh tail log

Or view the current CPU load on each render instance:

$ brenda-tool ssh uptime

One of the risks of running spot instances is that your instances can be
terminated without warning if the spot price rises above your maximum
bid price.  In this case, the spot requests status might look like this:

$ brenda-run status
Spot Requests
  sir-5dbba434 RegionInfo:us-east-1 one-time 2013-10-23T09:12:30.000Z $0.07 <Status: instance-terminated-by-price>
  sir-64daca34 RegionInfo:us-east-1 one-time 2013-10-23T09:12:30.000Z $0.07 <Status: instance-terminated-by-price>
  sir-9cf0b834 RegionInfo:us-east-1 one-time 2013-10-23T09:12:30.000Z $0.07 <Status: instance-terminated-by-price>
  sir-af53be34 RegionInfo:us-east-1 one-time 2013-10-23T09:12:30.000Z $0.07 <Status: instance-terminated-by-price>

Brenda has actually been designed to recover gracefully from instance
termination and can handle the case where instances are randomly
created and destroyed during the course of the render.  It is able to
do this because no task is permanently removed from the work queue
until the products of the task (rendered frames) have been pushed to
the S3 frame bucket.  In particular,

1. Any instance that is terminated will return all uncompleted tasks
   back to the work queue.

2. brenda-run can be used to create "persistent" spot instances, where even
   if an instance is killed because the spot price increases beyond the
   maximum bid, another will be automatically restarted when the spot price
   once again reaches or falls below the maximum bid you specified in the
   "brenda-run spot" command.  To create a persistent spot instance, use
   the -P flag when running the "brenda-run spot" command.

While the render job progresses, you can view the frames that have been
rendered thus far and copied to the S3 file store:

$ s3cmd ls s3://FRAME_BUCKET

Because we told the render instances to immediately shut down when the
render completes, the "brenda-run status" command will show no Active
Instances on render completion.  At this point, the "brenda-work status"
command should show a queue size of 0.

To download the frames we rendered, prepare a local directory to accept
the frames:

$ mkdir frames
$ s3cmd get -r s3://FRAME_BUCKET frames

If something goes wrong during the render, Brenda will normally not shut
down the instances to give you a chance to download the log files:

$ mkdir logs
$ brenda-tool rsync log logs/HOST.log

If you want to cancel the render job and shut down the instances,
there are commands for that as well:

Cancel pending spot requests that have not been activated yet:

$ brenda-run cancel

Kill all active instances:

$ brenda-run -T stop


NOTES -- subframe rendering
---------------------------

Normally, the smallest unit of work in Brenda is the frame.  While this
is often sufficient, sometimes it is advantageous to use a smaller unit
of work, such as by dividing each frame into a grid of tiles, where each
tile is a separate unit of work.

1.  For example, subframe rendering can accelerate the rendering of stills.
    Normally a still (because it is a single frame) cannot take advantage
    of render-farm acceleration designed for animation.  However, subframe
    rendering allows the work of rendering a single frame to be subdivided
    across many instances, allowing for the rendering of stills to be
    accelerated.

2.  When rendering an animation where each frame takes many computer-hours
    to render, there is always the risk that the instance might be
    terminated before completion, causing the loss of all computer time
    already invested in the unfinished frame.  To mitigate this risk,
    subframe animation can be used to cut down the length of time needed
    to render a unit of work.

To do subframe rendering, we need to create a different task template:

cat >subframe.py <<EOF
import bpy
bpy.context.scene.render.border_min_x = $SF_MIN_X
bpy.context.scene.render.border_max_x = $SF_MAX_X
bpy.context.scene.render.border_min_y = $SF_MIN_Y
bpy.context.scene.render.border_max_y = $SF_MAX_Y
bpy.context.scene.render.use_border = True
EOF
blender -b *.blend -P subframe.py -F PNG -o $OUTDIR/frame_######_X-$SF_MIN_X-$SF_MAX_X-Y-$SF_MIN_Y-$SF_MAX_Y $FRAME -t 0 -a

Save this template in the file subframe-template, then generate the work
queue as follows.  Assuming that we want to break each frame into 64 8x8
tiles, use the following command to generate a work queue for the first
240 frames:

brenda-work -T subframe-template -e 240 -X 8 -Y 8 -d push

NOTES -- multiframe rendering
-----------------------------

Multiframe rendering means that each unit of work processed by the
render farm includes multiple frames (in this sense, it is the opposite
of subframe rendering).  This can be useful when per-frame render
times are small and you want to render multiple frames for each instantiation
of the blender executable, or when there is a startup cost associated
with rendering a series of frames, and you want to amoritize that cost
over multiple frames.

When generating the work queue, specify the -S option and the number of
frames you would like to group together in each unit of work.
The below example will generate a work queue to render 240 frames in
units of 10 frames each.

$ brenda-work -T frame-template -S 10 -e 240 push

blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 1 -e 10 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 11 -e 20 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 21 -e 30 -j 1 -t 0 -a
.
.
.
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 221 -e 230 -j 1 -t 0 -a
blender -b *.blend -F PNG -o $OUTDIR/frame_###### -s 231 -e 240 -j 1 -t 0 -a


NOTES -- rendering large projects
---------------------------------

Brenda works by having each Brenda worker instance in the render farm
download your compressed project file from S3 on startup.  This line
in the $HOME/.brenda.conf file tells Brenda where to find the project:

BLENDER_PROJECT=s3://PROJECT_BUCKET/myproject.tar.gz

Now if you are dealing with a project that is tens or hundreds of
GB (or more), there will be an initial delay after instances start up
to download this file.

As an alternative, consider creating your own Brenda AMI (see
instructions below) and load your project directory onto the
AMI filesystem itself, so that when the instance is started,
the project directory is already present and doesn't need to
be downloaded from S3.

Suppose your project directory is present on the AMI in
/root/myproject

Then you would modify your $HOME/.brenda.conf file (on your client
computer) to refer to the blender project using a file://
URL instead of a s3:// URL:

BLENDER_PROJECT=file:///root/myproject


NOTES -- how to create a Brenda AMI
-----------------------------------

While Brenda already has a link to an existing AMI that has Blender
and Brenda pre-installed, you can build your own AMI using the
following procedure.

To create an EC2 AMI capable of acting as a Brenda node,
use the Ubuntu 12.04 x64 AMI as a starting point, then
execute these commands as root.

perl -p -i.bak -e 's/^disable_root: 1/disable_root: 0/' /etc/cloud/cloud.cfg
perl -p -i.bak -e 's/.*ssh-rsa/ssh-rsa/' /root/.ssh/authorized_keys
add-apt-repository -y ppa:irie/blender
apt-get update
apt-get install -y blender python-pip gcc python-dev libcurl4-openssl-dev git
pip install -U boto

Next, download and install Brenda:

git clone http://github.com/jamesyonan/brenda.git
cd brenda
python setup.py install

Now save the AMI.  The resulting image will have all dependencies
necessary to run Blender and Brenda.
